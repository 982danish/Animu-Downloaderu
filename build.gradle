plugins {
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.5'
}

repositories {
    mavenCentral()
}


//def currentOS = org.gradle.internal.os.OperatingSystem.current()
//def platform
//if (currentOS.isWindows()) {
//    platform = 'win'
//} else if (currentOS.isLinux()) {
//    platform = 'linux'
//} else if (currentOS.isMacOsX()) {
//    platform = 'mac'
//}

dependencies {
//    compile 'io.javaslang:javaslang:2.0.6'
//    implementation "org.openjfx:javafx-controls:11:${platform}"
//    implementation "org.openjfx:javafx-fxml:11:${platform}"
//    implementation "org.openjfx:javafx-web:11:${platform}"
    implementation 'org.jsoup:jsoup:1.11.3'
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

mainClassName = "$moduleName/com.codingotaku.apps.Main"

eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') }.each {
                    it.entryAttributes['module'] = 'true'
                }
            }
        }
    }
}

def java_home = hasProperty('org.gradle.java.home') ? getProperty('org.gradle.java.home') : System.getenv('JAVA_HOME')
def fx_jmods = hasProperty('path.to.fx.mods') ? getProperty('path.to.fx.mods') : System.getenv('PATH_TO_FX_MODS')

task jlink(type: Exec) {
    dependsOn 'clean'
    dependsOn 'jar'

    workingDir 'build'

    if (java_home == null) {
        throw new RuntimeException("java_home is not defined.")
    }
    if (fx_jmods == null) {
        throw new RuntimeException("fx_jmods is not defined.")
    }
    commandLine "${java_home}/bin/jlink", '--module-path', "libs${File.pathSeparatorChar}${fx_jmods}",
            '--add-modules', "${moduleName}", '--output', "${moduleName}", '--strip-debug',
            '--compress', '2', '--no-header-files', '--no-man-pages'
}
